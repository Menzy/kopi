//
//  PrivacyFilter.swift
//  kopi
//
//  Created by Wan Menzy on 19/06/2025.
//

import Foundation
import AppKit

class PrivacyFilter {
    static let shared = PrivacyFilter()
    
    private init() {}
    
    // MARK: - Main Filtering Method
    
    func shouldExcludeContent(_ content: String, sourceApp: String? = nil) -> (shouldExclude: Bool, reason: String?) {
        // Check NSPasteboard privacy markers first
        if let reason = checkPasteboardPrivacyMarkers() {
            return (true, reason)
        }
        
        // Check source app exclusions
        if let sourceApp = sourceApp, let reason = checkSourceAppExclusions(sourceApp) {
            return (true, reason)
        }
        
        // Check content patterns
        if let reason = checkContentPatterns(content) {
            return (true, reason)
        }
        
        return (false, nil)
    }
    
    // MARK: - Privacy Marker Checks
    
    private func checkPasteboardPrivacyMarkers() -> String? {
        let pasteboard = NSPasteboard.general
        
        // Check for concealed type (sensitive content)
        if pasteboard.types?.contains(NSPasteboard.PasteboardType("org.nspasteboard.ConcealedType")) == true {
            return "Content marked as concealed by source application"
        }
        
        // Check for transient type (temporary content)
        if pasteboard.types?.contains(NSPasteboard.PasteboardType("org.nspasteboard.TransientType")) == true {
            return "Content marked as transient by source application"
        }
        
        // Check for auto-generated type
        if pasteboard.types?.contains(NSPasteboard.PasteboardType("org.nspasteboard.AutoGeneratedType")) == true {
            return "Content marked as auto-generated by source application"
        }
        
        return nil
    }
    
    // MARK: - Source App Exclusions
    
    // Only blocks truly sensitive applications (password managers, banking apps, system security tools)
    // Development tools like Xcode, VS Code, editors are now allowed by default
    // Users can add custom exclusions through settings if needed
    private func checkSourceAppExclusions(_ bundleID: String) -> String? {
        let excludedApps = [
            // Password Managers - These should always be blocked
            "com.1password.1password7",
            "com.agilebits.onepassword7",
            "com.agilebits.onepassword-osx",
            "com.bitwarden.desktop",
            "com.lastpass.LastPass",
            "com.apple.keychainaccess",
            "com.dashlane.dashlane",
            "com.keeper.KeeperDesktop",
            
            // Banking & Financial Apps - Sensitive financial data
            "com.apple.wallet",
            "com.mint.Mint",
            "com.quicken.Quicken2017",
            "com.intuit.QuickBooks",
            
            // System Security & Admin Tools - May contain sensitive system info
            "com.apple.systempreferences",
            "com.apple.ActivityMonitor",
            "com.apple.Console",
            "com.apple.Keychain-Access",
            
            // Terminal/SSH apps when dealing with secure sessions
            // Note: We could make this configurable later if users want to block terminals
        ]
        
        if excludedApps.contains(bundleID) {
            return "Source application (\(bundleID)) is in exclusion list"
        }
        
        return nil
    }
    
    // MARK: - Content Pattern Checks
    
    private func checkContentPatterns(_ content: String) -> String? {
        // Check for password patterns
        if isLikelyPassword(content) {
            return "Content appears to be a password"
        }
        
        // Check for credit card numbers
        if containsCreditCardNumber(content) {
            return "Content contains credit card number"
        }
        
        // Check for social security numbers
        if containsSSN(content) {
            return "Content contains social security number"
        }
        
        // Check for API keys
        if containsAPIKey(content) {
            return "Content contains API key or token"
        }
        
        // Check for private keys
        if containsPrivateKey(content) {
            return "Content contains private key"
        }
        
        return nil
    }
    
    // MARK: - Pattern Detection Methods
    
    private func isLikelyPassword(_ content: String) -> Bool {
        // More conservative password detection to avoid blocking code snippets
        let length = content.count
        
        // Too short or too long to be a typical password
        guard length >= 8 && length <= 64 else { return false }
        
        // Check for typical password characteristics
        let hasUppercase = content.rangeOfCharacter(from: .uppercaseLetters) != nil
        let hasLowercase = content.rangeOfCharacter(from: .lowercaseLetters) != nil
        let hasNumbers = content.rangeOfCharacter(from: .decimalDigits) != nil
        let hasSpecialChars = content.rangeOfCharacter(from: CharacterSet(charactersIn: "!@#$%^&*()_+-=[]{}|;:,.<>?")) != nil
        
        // No whitespace (passwords typically don't have spaces)
        let hasWhitespace = content.rangeOfCharacter(from: .whitespacesAndNewlines) != nil
        
        // Don't block content with common code patterns
        let hasCodePatterns = content.contains("=") || content.contains("(") || content.contains("{") || 
                             content.contains("//") || content.contains("/*") || content.contains("class ") ||
                             content.contains("func ") || content.contains("var ") || content.contains("let ")
        
        // Count how many character types are present
        let characterTypeCount = [hasUppercase, hasLowercase, hasNumbers, hasSpecialChars].filter { $0 }.count
        
        // More strict criteria for password detection:
        // - Must have all 4 character types (very strong password pattern)
        // - No whitespace
        // - No obvious code patterns
        // - Length between 8-64 characters
        return characterTypeCount == 4 && !hasWhitespace && !hasCodePatterns && length >= 10
    }
    
    private func containsCreditCardNumber(_ content: String) -> Bool {
        // Remove all non-digits
        let digitsOnly = content.replacingOccurrences(of: "[^0-9]", with: "", options: .regularExpression)
        
        // Check length (credit cards are typically 13-19 digits)
        guard digitsOnly.count >= 13 && digitsOnly.count <= 19 else { return false }
        
        // Luhn algorithm check
        return luhnCheck(digitsOnly)
    }
    
    private func containsSSN(_ content: String) -> Bool {
        // SSN patterns: XXX-XX-XXXX or XXXXXXXXX
        let ssnPatterns = [
            "\\b\\d{3}-\\d{2}-\\d{4}\\b",
            "\\b\\d{9}\\b"
        ]
        
        for pattern in ssnPatterns {
            if content.range(of: pattern, options: .regularExpression) != nil {
                return true
            }
        }
        
        return false
    }
    
    private func containsAPIKey(_ content: String) -> Bool {
        // Common API key patterns
        let apiKeyPatterns = [
            "(?i)api[_-]?key[\\s]*[:=][\\s]*['\"]?[a-zA-Z0-9]{20,}['\"]?",
            "(?i)access[_-]?token[\\s]*[:=][\\s]*['\"]?[a-zA-Z0-9]{20,}['\"]?",
            "(?i)secret[_-]?key[\\s]*[:=][\\s]*['\"]?[a-zA-Z0-9]{20,}['\"]?",
            "sk_[a-zA-Z0-9]{20,}", // Stripe secret keys
            "pk_[a-zA-Z0-9]{20,}", // Stripe public keys
            "AIza[0-9A-Za-z\\-_]{35}", // Google API keys
            "ya29\\.[0-9A-Za-z\\-_]+", // Google OAuth tokens
            "AKIA[0-9A-Z]{16}", // AWS access keys
        ]
        
        for pattern in apiKeyPatterns {
            if content.range(of: pattern, options: .regularExpression) != nil {
                return true
            }
        }
        
        return false
    }
    
    private func containsPrivateKey(_ content: String) -> Bool {
        // Check for private key headers
        let privateKeyPatterns = [
            "-----BEGIN PRIVATE KEY-----",
            "-----BEGIN RSA PRIVATE KEY-----",
            "-----BEGIN DSA PRIVATE KEY-----",
            "-----BEGIN EC PRIVATE KEY-----",
            "-----BEGIN OPENSSH PRIVATE KEY-----"
        ]
        
        return privateKeyPatterns.contains { content.contains($0) }
    }
    
    // MARK: - Helper Methods
    
    private func luhnCheck(_ cardNumber: String) -> Bool {
        let digits = cardNumber.compactMap { Int(String($0)) }
        guard !digits.isEmpty else { return false }
        
        let checksum = digits.reversed().enumerated().reduce(0) { sum, pair in
            let (index, digit) = pair
            let doubled = index % 2 == 1 ? digit * 2 : digit
            return sum + (doubled > 9 ? doubled - 9 : doubled)
        }
        
        return checksum % 10 == 0
    }
} 